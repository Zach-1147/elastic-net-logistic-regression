new_row$Food_Description <- paste0("i-", array1[j])
new_row$Food_Amount <- items_file$Food_Amount[i] * array2[j]
# Retain fid, pid, and user_name from the items_file MD row
new_row$user_name <- items_file$user_name[i]
new_row$fid <- items_file$fid[i]
new_row$pid <- items_file$pid[i]
# Fill in MD to link these new rows to the original MD
new_row$MD <- items_file$MD[i]
# Add the new row to the results
results[[length(results) + 1]] <- new_row
}
}
}
# Combine all the rows into a single data frame
do.call(rbind, results)
}
# Run the function to get the final dataframe
final_df <- insert_rows_below_md(items_file, mixed_db)
View(mixed_db)
mixed_db <- read_excel("final_mdd.xlsm")
mixed_db <- mixed_db %>%
mutate(MD_ID = as.numeric(MD_ID))
insert_rows_below_md <- function(items_file, mixed_db) {
results <- list() # To store the final set of rows
# Loop over each row in the items_file
for (i in 1:nrow(items_file)) {
# Add the current row from items_file to the results
results[[length(results) + 1]] <- items_file[i, ]
# Check if the current row's MD has a matching MD_ID in mixed_db
if (items_file$MD[i] %in% mixed_db$MD_ID) {
# Get the matching mixed_db row
matching_row <- mixed_db[mixed_db$MD_ID == items_file$MD[i], ]
# Split Array1 and Array2 from the matching mixed_db row
array1 <- unlist(strsplit(matching_row$array1, ";"))
array2 <- as.numeric(unlist(strsplit(matching_row$array2, ";")))
# Create and add new rows based on array1 and array2
for (j in seq_along(array1)) {
# Create a new row with default/NA values for all columns
new_row <- as.data.frame(matrix(ncol = ncol(items_file), nrow = 1))
names(new_row) <- names(items_file)
# Set the values for the specific columns
new_row$Food_Description <- paste0("i-", array1[j])
new_row$Food_Amount <- items_file$Food_Amount[i] * array2[j]
# Retain fid, pid, and user_name from the items_file MD row
new_row$user_name <- items_file$user_name[i]
new_row$fid <- items_file$fid[i]
new_row$pid <- items_file$pid[i]
# Fill in MD to link these new rows to the original MD
new_row$MD <- items_file$MD[i]
# Add the new row to the results
results[[length(results) + 1]] <- new_row
}
}
}
# Combine all the rows into a single data frame
do.call(rbind, results)
}
# Run the function to get the final dataframe
final_df <- insert_rows_below_md(items_file, mixed_db)
#Re-apply the mapping up for food category and reference amounts
View(final_df)
insert_rows_below_md <- function(items_file, mixed_db) {
results <- list() # To store the final set of rows
# Loop over each row in the items_file
for (i in 1:nrow(items_file)) {
# Add the current row from items_file to the results
results[[length(results) + 1]] <- items_file[i, ]
# Check if the current row's MD has a matching MD_ID in mixed_db
if (items_file$MD[i] %in% mixed_db$MD_ID) {
# Get the matching mixed_db row
matching_row <- mixed_db[mixed_db$MD_ID == items_file$MD[i], ]
# Split Array1 and Array2 from the matching mixed_db row
array1 <- unlist(strsplit(matching_row$array1, ";"))
array2 <- as.numeric(unlist(strsplit(matching_row$array2, ";")))
# Create and add new rows based on array1 and array2
for (j in seq_along(array1)) {
# Create a new row with default/NA values for all columns
new_row <- as.data.frame(matrix(ncol = ncol(items_file), nrow = 1))
names(new_row) <- names(items_file)
# Set the values for the specific columns
new_row$Food_Description <- array1[j])
insert_rows_below_md <- function(items_file, mixed_db) {
results <- list() # To store the final set of rows
# Loop over each row in the items_file
for (i in 1:nrow(items_file)) {
# Add the current row from items_file to the results
results[[length(results) + 1]] <- items_file[i, ]
# Check if the current row's MD has a matching MD_ID in mixed_db
if (items_file$MD[i] %in% mixed_db$MD_ID) {
# Get the matching mixed_db row
matching_row <- mixed_db[mixed_db$MD_ID == items_file$MD[i], ]
# Split Array1 and Array2 from the matching mixed_db row
array1 <- unlist(strsplit(matching_row$array1, ";"))
array2 <- as.numeric(unlist(strsplit(matching_row$array2, ";")))
# Create and add new rows based on array1 and array2
for (j in seq_along(array1)) {
# Create a new row with default/NA values for all columns
new_row <- as.data.frame(matrix(ncol = ncol(items_file), nrow = 1))
names(new_row) <- names(items_file)
# Set the values for the specific columns
new_row$Food_Description <- array1[j]
new_row$Food_Amount <- items_file$Food_Amount[i] * array2[j]
# Retain fid, pid, and user_name from the items_file MD row
new_row$user_name <- items_file$user_name[i]
new_row$fid <- items_file$fid[i]
new_row$pid <- items_file$pid[i]
# Fill in MD to link these new rows to the original MD
new_row$MD <- items_file$MD[i]
# Add the new row to the results
results[[length(results) + 1]] <- new_row
}
}
}
# Combine all the rows into a single data frame
do.call(rbind, results)
}
# Run the function to get the final dataframe
final_df <- insert_rows_below_md(items_file, mixed_db)
#Re-apply the mapping up for food category and reference amounts
mapping_dict_FG <- setNames(gen_db$FG, gen_db$FD)
mapping_dict_RA <- setNames(gen_db$RA, gen_db$FD)
#Apply mappings to items_file based on Food_Description
final_df <- final_df %>%
mutate(Food_Category = map_chr(Food_Description, ~mapping_dict_FG[.x]),
Reference_Amount = map_chr(Food_Description, ~mapping_dict_RA[.x]))
#Convert Food_Amount and Reference_Amount to numeric
final_df <- final_df %>%
mutate(Food_Amount = as.numeric(Food_Amount),
Reference_Amount = as.numeric(Reference_Amount))
#Calculate #_Servings
final_df <- final_df %>%
mutate(`#_Servings` = Food_Amount / Reference_Amount)
View(final_df)
final_find <- final_df %>%
filter(is.na(Reference_Amount) & MD > 0 & str_starts(Food_Description, "i-"))
View(final_find)
View(final_df)
Serving_scores <- final_df %>%
group_by(user_name) %>%
summarise(`Whole Grains` = sum(Food_Amount[Food_Category == "Whole Grains"], na.rm = TRUE))
View(Serving_scores)
Serving_scores <- final_df %>%
group_by(user_name) %>%
summarise(`Whole Grains` = sum(`#_Servings`[Food_Category == "Whole Grains"], na.rm = TRUE))
View(Serving_scores)
Serving_scores <- final_df %>%
group_by(user_name, Food_Category) %>%
summarise(Servings_Sum = sum(`#_Servings`, na.rm = TRUE), .groups = 'drop') %>%
pivot_wider(names_from = Food_Category, values_from = Servings_Sum, values_fill = list(Servings_Sum = 0))
View(new_rows)
View(Serving_scores)
rm(list=ls())
#Load libraries and data
install_if_needed <- function(package_name) {
if (!require(package_name, character.only = TRUE)) {
install.packages(package_name)
library(package_name, character.only = TRUE)
}
}
#Create vector with packages
packages <- c("tidyverse", "ggplot2", "readxl", "stringr")
#Nest function in loop
for (pkg in packages) {
install_if_needed(pkg)
}
#Load items file
items_file <- read_excel("PDI-P - Items File -2023.05.02-ZR.xlsx")
#Load general database
gen_db <- read_excel('Pythondb.xlsm')
#Load mixed dish database
mixed_db <- read_excel("final_mdd.xlsx")
#Load libraries and data
install_if_needed <- function(package_name) {
if (!require(package_name, character.only = TRUE)) {
install.packages(package_name)
library(package_name, character.only = TRUE)
}
}
#Create vector with packages
packages <- c("tidyverse", "ggplot2", "readxl", "stringr")
#Nest function in loop
for (pkg in packages) {
install_if_needed(pkg)
}
#Load items file
items_file <- read_excel("PDI-P - Items File -2023.05.02-ZR.xlsx")
#Load general database
gen_db <- read_excel('Pythondb.xlsm')
#Load mixed dish database
mixed_db <- read_excel("final_mdd.xlsm")
#Create columns and re-arrange columns for the processing of participant food log rows.
#Copy columns to move to very left of spreadsheet
copied_column_foodamt <- items_file$FoodAmt
copied_column_fooddesc <- items_file$Food_Description
#Remove copied columns
items_file <- items_file %>% select(-FoodAmt, -Food_Description)
#Add in copied columns, and make new columns for variables of interest
items_file <- items_file %>%
mutate(MD = "",
Food_Description = copied_column_fooddesc,
Food_Amount = copied_column_foodamt,
Reference_Amount = "",
`#_Servings` = "",
Food_Category = "")
#Specify new column order
items_file <- items_file %>%
select(user_name, MD, Food_Description, Food_Amount, Reference_Amount, `#_Servings`, Food_Category, everything())
#Create mapping lists for Food_Category and Reference_Amount
mapping_dict_FG <- setNames(gen_db$FG, gen_db$FD)
mapping_dict_RA <- setNames(gen_db$RA, gen_db$FD)
#Apply mappings to items_file based on Food_Description
items_file <- items_file %>%
mutate(Food_Category = map_chr(Food_Description, ~mapping_dict_FG[.x]),
Reference_Amount = map_chr(Food_Description, ~mapping_dict_RA[.x]))
#Convert Food_Amount and Reference_Amount to numeric
items_file <- items_file %>%
mutate(Food_Amount = as.numeric(Food_Amount),
Reference_Amount = as.numeric(Reference_Amount))
#Calculate #_Servings
items_file <- items_file %>%
mutate(`#_Servings` = Food_Amount / Reference_Amount)
#Trim whitespcae
mixed_db$Description <- trimws(mixed_db$Description)
items_file$Food_Description <- trimws(items_file$Food_Description)
#Return reference MD_ID values to MD column for identification in items file
items_file$MD <- mixed_db$MD_ID[match(items_file$Food_Description, mixed_db$Description)]
#Ensure MD and MD_ID columns are numeric to enable matching process
items_file <- items_file %>%
mutate(MD = as.numeric(MD))
mixed_db <- mixed_db %>%
mutate(MD_ID = as.numeric(MD_ID))
insert_rows_below_md <- function(items_file, mixed_db) {
results <- list() # To store the final set of rows
# Loop over each row in the items_file
for (i in 1:nrow(items_file)) {
# Add the current row from items_file to the results
results[[length(results) + 1]] <- items_file[i, ]
# Check if the current row's MD has a matching MD_ID in mixed_db
if (items_file$MD[i] %in% mixed_db$MD_ID) {
# Get the matching mixed_db row
matching_row <- mixed_db[mixed_db$MD_ID == items_file$MD[i], ]
# Split Array1 and Array2 from the matching mixed_db row
array1 <- unlist(strsplit(matching_row$array1, ";"))
array2 <- as.numeric(unlist(strsplit(matching_row$array2, ";")))
# Create and add new rows based on array1 and array2
for (j in seq_along(array1)) {
# Create a new row with default/NA values for all columns
new_row <- as.data.frame(matrix(ncol = ncol(items_file), nrow = 1))
names(new_row) <- names(items_file)
# Set the values for the specific columns
new_row$Food_Description <- array1[j]
new_row$Food_Amount <- items_file$Food_Amount[i] * array2[j]
# Retain fid, pid, and user_name from the items_file MD row
new_row$user_name <- items_file$user_name[i]
new_row$fid <- items_file$fid[i]
new_row$pid <- items_file$pid[i]
# Fill in MD to link these new rows to the original MD
new_row$MD <- items_file$MD[i]
# Add the new row to the results
results[[length(results) + 1]] <- new_row
}
}
}
# Combine all the rows into a single data frame
do.call(rbind, results)
}
# Run the function to get the final dataframe
final_df <- insert_rows_below_md(items_file, mixed_db)
#Re-apply the mapping up for food category and reference amounts
mapping_dict_FG <- setNames(gen_db$FG, gen_db$FD)
mapping_dict_RA <- setNames(gen_db$RA, gen_db$FD)
#Apply mappings to items_file based on Food_Description
final_df <- final_df %>%
mutate(Food_Category = map_chr(Food_Description, ~mapping_dict_FG[.x]),
Reference_Amount = map_chr(Food_Description, ~mapping_dict_RA[.x]))
#Convert Food_Amount and Reference_Amount to numeric
final_df <- final_df %>%
mutate(Food_Amount = as.numeric(Food_Amount),
Reference_Amount = as.numeric(Reference_Amount))
#Calculate #_Servings
final_df <- final_df %>%
mutate(`#_Servings` = Food_Amount / Reference_Amount)
View(final_df)
Serving_scores <- final_df %>%
group_by(user_name, Food_Category) %>%
summarise(Servings_Sum = sum(`#_Servings`, na.rm = TRUE), .groups = 'drop') %>%
pivot_wider(names_from = Food_Category, values_from = Servings_Sum, values_fill = list(Servings_Sum = 0))
View(Serving_scores)
rm(list=ls())
#Load libraries and data
install_if_needed <- function(package_name) {
if (!require(package_name, character.only = TRUE)) {
install.packages(package_name)
library(package_name, character.only = TRUE)
}
}
#Create vector with packages
packages <- c("tidyverse", "ggplot2", "readxl", "stringr")
#Nest function in loop
for (pkg in packages) {
install_if_needed(pkg)
}
#Load items file
items_file <- read_excel("PDI-P - Items File -2023.05.02-ZR.xlsx")
#Load general database
gen_db <- read_excel('Pythondb.xlsm')
#Load mixed dish database
mixed_db <- read_excel("final_mdd.xlsm")
#Create columns and re-arrange columns for the processing of participant food log rows.
#Copy columns to move to very left of spreadsheet
copied_column_foodamt <- items_file$FoodAmt
copied_column_fooddesc <- items_file$Food_Description
#Remove copied columns
items_file <- items_file %>% select(-FoodAmt, -Food_Description)
#Add in copied columns, and make new columns for variables of interest
items_file <- items_file %>%
mutate(MD = "",
Food_Description = copied_column_fooddesc,
Food_Amount = copied_column_foodamt,
Reference_Amount = "",
`#_Servings` = "",
Food_Category = "")
#Specify new column order
items_file <- items_file %>%
select(user_name, MD, Food_Description, Food_Amount, Reference_Amount, `#_Servings`, Food_Category, everything())
#Create mapping lists for Food_Category and Reference_Amount
mapping_dict_FG <- setNames(gen_db$FG, gen_db$FD)
mapping_dict_RA <- setNames(gen_db$RA, gen_db$FD)
#Apply mappings to items_file based on Food_Description
items_file <- items_file %>%
mutate(Food_Category = map_chr(Food_Description, ~mapping_dict_FG[.x]),
Reference_Amount = map_chr(Food_Description, ~mapping_dict_RA[.x]))
#Convert Food_Amount and Reference_Amount to numeric
items_file <- items_file %>%
mutate(Food_Amount = as.numeric(Food_Amount),
Reference_Amount = as.numeric(Reference_Amount))
#Calculate #_Servings
items_file <- items_file %>%
mutate(`#_Servings` = Food_Amount / Reference_Amount)
#Trim whitespcae
mixed_db$Description <- trimws(mixed_db$Description)
items_file$Food_Description <- trimws(items_file$Food_Description)
#Return reference MD_ID values to MD column for identification in items file
items_file$MD <- mixed_db$MD_ID[match(items_file$Food_Description, mixed_db$Description)]
#Ensure MD and MD_ID columns are numeric to enable matching process
items_file <- items_file %>%
mutate(MD = as.numeric(MD))
mixed_db <- mixed_db %>%
mutate(MD_ID = as.numeric(MD_ID))
insert_rows_below_md <- function(items_file, mixed_db) {
results <- list() # To store the final set of rows
# Loop over each row in the items_file
for (i in 1:nrow(items_file)) {
# Add the current row from items_file to the results
results[[length(results) + 1]] <- items_file[i, ]
# Check if the current row's MD has a matching MD_ID in mixed_db
if (items_file$MD[i] %in% mixed_db$MD_ID) {
# Get the matching mixed_db row
matching_row <- mixed_db[mixed_db$MD_ID == items_file$MD[i], ]
# Split Array1 and Array2 from the matching mixed_db row
array1 <- unlist(strsplit(matching_row$array1, ";"))
array2 <- as.numeric(unlist(strsplit(matching_row$array2, ";")))
# Create and add new rows based on array1 and array2
for (j in seq_along(array1)) {
# Create a new row with default/NA values for all columns
new_row <- as.data.frame(matrix(ncol = ncol(items_file), nrow = 1))
names(new_row) <- names(items_file)
# Set the values for the specific columns
new_row$Food_Description <- array1[j]
new_row$Food_Amount <- items_file$Food_Amount[i] * array2[j]
# Retain fid, pid, and user_name from the items_file MD row
new_row$user_name <- items_file$user_name[i]
new_row$fid <- items_file$fid[i]
new_row$pid <- items_file$pid[i]
# Fill in MD to link these new rows to the original MD
new_row$MD <- items_file$MD[i]
# Add the new row to the results
results[[length(results) + 1]] <- new_row
}
}
}
# Combine all the rows into a single data frame
do.call(rbind, results)
}
# Run the function to get the final dataframe
final_df <- insert_rows_below_md(items_file, mixed_db)
#Re-apply the mapping up for food category and reference amounts
mapping_dict_FG <- setNames(gen_db$FG, gen_db$FD)
mapping_dict_RA <- setNames(gen_db$RA, gen_db$FD)
#Apply mappings to items_file based on Food_Description
final_df <- final_df %>%
mutate(Food_Category = map_chr(Food_Description, ~mapping_dict_FG[.x]),
Reference_Amount = map_chr(Food_Description, ~mapping_dict_RA[.x]))
#Convert Food_Amount and Reference_Amount to numeric
final_df <- final_df %>%
mutate(Food_Amount = as.numeric(Food_Amount),
Reference_Amount = as.numeric(Reference_Amount))
#Calculate #_Servings
final_df <- final_df %>%
mutate(`#_Servings` = Food_Amount / Reference_Amount)
Serving_scores <- final_df %>%
group_by(user_name, Food_Category) %>%
summarise(Servings_Sum = sum(`#_Servings`, na.rm = TRUE), .groups = 'drop') %>%
pivot_wider(names_from = Food_Category, values_from = Servings_Sum, values_fill = list(Servings_Sum = 0))
View(Serving_scores)
Serving_scores <- final_df %>%
filter(!Food_Category %in% c("Alcohol", "Water", "MD", ".")) %>%
group_by(user_name, Food_Category) %>%
summarise(Servings_Sum = sum(`#_Servings`, na.rm = TRUE), .groups = 'drop') %>%
pivot_wider(names_from = Food_Category, values_from = Servings_Sum, values_fill = list(Servings_Sum = 0))
View(Serving_scores)
Serving_scores <- final_df %>%
group_by(user_name, Food_Category) %>%
summarise(Servings_Sum = sum(`#_Servings`, na.rm = TRUE), .groups = 'drop') %>%
pivot_wider(names_from = Food_Category, values_from = Servings_Sum, values_fill = list(Servings_Sum = 0))
View(Serving_scores)
View(final_df)
Serving_scores <- final_df %>%
filter(!Food_Category %in% c("Alcohol", "Water", "MD", ".")) %>%
group_by(user_name, Food_Category) %>%
summarise(Servings_Sum = sum(`#_Servings`, na.rm = TRUE), .groups = 'drop') %>%
pivot_wider(names_from = Food_Category, values_from = Servings_Sum, values_fill = list(Servings_Sum = 0))
all_users <- distinct(final_df, user_name)
# Left join to ensure all users are included
Serving_scores <- all_users %>%
left_join(Serving_scores, by = "user_name")
View(Serving_scores)
Serving_scores <- final_df %>%
group_by(user_name) %>%
summarise(
Alcohol_Sum = sum(Food_Amount[Food_Category == "Alcohol"], na.rm = TRUE),
Total_KCAL = sum(KCAL, na.rm = TRUE)
) %>%
left_join(
final_df %>%
filter(!Food_Category %in% c("Alcohol", "Water", "MD", ".")) %>%
group_by(user_name, Food_Category) %>%
summarise(Servings_Sum = sum(`#_Servings`, na.rm = TRUE), .groups = 'drop') %>%
pivot_wider(names_from = Food_Category, values_from = Servings_Sum, values_fill = list(Servings_Sum = 0)),
by = "user_name"
)
final_df <- final_df %>%
mutate(KCAL = as.numeric(KCAL))
Serving_scores <- final_df %>%
group_by(user_name) %>%
summarise(
Alcohol_Sum = sum(Food_Amount[Food_Category == "Alcohol"], na.rm = TRUE),
Total_KCAL = sum(KCAL, na.rm = TRUE)
) %>%
left_join(
final_df %>%
filter(!Food_Category %in% c("Alcohol", "Water", "MD", ".")) %>%
group_by(user_name, Food_Category) %>%
summarise(Servings_Sum = sum(`#_Servings`, na.rm = TRUE), .groups = 'drop') %>%
pivot_wider(names_from = Food_Category, values_from = Servings_Sum, values_fill = list(Servings_Sum = 0)),
by = "user_name"
)
# Ensure all user_names are included, even if they have zeros for all categories
all_users <- distinct(final_df, user_name)
# Left join to ensure all users are included
Serving_scores <- all_users %>%
left_join(Serving_scores, by = "user_name")
View(Serving_scores)
quintiles <- final_df %>%
group_by(Food_Category) %>%
mutate(Quintile = ntile(Amount, 5)) %>%
ungroup()
quintiles <- final_df %>%
group_by(Food_Category) %>%
mutate(Quintile = ntile(`#_Servings`, 5)) %>%
ungroup()
View(quintiles)
quintiles <- final_df %>%
group_by(Food_Category) %>%
summarise(Quintile = ntile(`#_Servings`, 5))
quintiles <- final_df %>%
group_by(Food_Category) %>%
summarise(Quintile = ntile(`#_Servings`, 5)) %>%
ungroup()
quintiles <- final_df %>%
group_by(Food_Category) %>%
mutate(Quintile = ntile(`#_Servings`, 5)) %>%
ungroup()
View(quintiles)
quintiles <- Serving_scores %>%
group_by(Food_Category) %>%
mutate(Quintile = ntile(`#_Servings`, 5)) %>%
ungroup()
rm(list=ls())
data <- read.csv("Immunologic profiles of patients with COVID-19.csv")
setwd("C:/Users/zachr/Desktop/6970_Asn_3")
getwd()
setwd("C:/Users/zachr/Desktop/6970_Asn_3")
data <- read.csv("Immunologic profiles of patients with COVID-19.csv")
data <- read.csv("Immunologic profiles of patients with COVID-19.xlsx")
data <- read.csv("Immunologic profiles of patients with COVID-19.xlsx")
data <- read.table("Immunologic profiles of patients with COVID-19.xlsx")
library(readxl)
data <- read_xlsx("Immunologic profiles of patients with COVID-19.xlsx")
View(data)
View(data)
mean(data$BTLA)
var(data$AGE)
mean(data$AGE)
mean(data$AGE)
var(data$AGE)
sd(data$AGE)
dist(data$BTLA)
plot(data$BTLA)
hist(data$BTLA)
density(data$BTLA)
View(data)
